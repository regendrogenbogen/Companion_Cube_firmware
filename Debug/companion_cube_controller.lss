
AVRASM ver. 2.1.51  C:\Users\ripper\Documents\companion_cube\firware_controller\companion_cube_controller\companion_cube_controller.asm Mon Apr 08 11:47:44 2013

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\Atmel Studio 6.0\extensions\Atmel\AVRAssembler\2.1.51.46\AvrAssembler/Include\m88pdef.inc'
                 
                 /*
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega88P.xml ***********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m88Pdef.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega88P
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega88P
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M88PDEF_INC_
                 #define _M88PDEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega88P
                 #pragma AVRPART ADMIN PART_NAME ATmega88P
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x93
                 .equ	SIGNATURE_002	= 0x0f
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                 .equ	PRR	= 0x64	; MEMORY MAPPED
                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	SPMCSR	= 0x37
                 .equ	MCUCR	= 0x35
                 .equ	MCUSR	= 0x34
                 .equ	SMCR	= 0x33
                 .equ	ACSR	= 0x30
                 .equ	SPDR	= 0x2e
                 .equ	SPSR	= 0x2d
                 .equ	SPCR	= 0x2c
                 .equ	GPIOR2	= 0x2b
                 .equ	GPIOR1	= 0x2a
                 .equ	OCR0B	= 0x28
                 .equ	OCR0A	= 0x27
                 .equ	TCNT0	= 0x26
                 .equ	TCCR0B	= 0x25
                 .equ	TCCR0A	= 0x24
                 .equ	GTCCR	= 0x23
                 .equ	EEARH	= 0x22
                 .equ	EEARL	= 0x21
                 .equ	EEDR	= 0x20
                 .equ	EECR	= 0x1f
                 .equ	GPIOR0	= 0x1e
                 .equ	EIMSK	= 0x1d
                 .equ	EIFR	= 0x1c
                 .equ	PCIFR	= 0x1b
                 .equ	TIFR2	= 0x17
                 .equ	TIFR1	= 0x16
                 .equ	TIFR0	= 0x15
                 .equ	PORTD	= 0x0b
                 .equ	DDRD	= 0x0a
                 .equ	PIND	= 0x09
                 .equ	PORTC	= 0x08
                 .equ	DDRC	= 0x07
                 .equ	PINC	= 0x06
                 .equ	PORTB	= 0x05
                 .equ	DDRB	= 0x04
                 .equ	PINB	= 0x03
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** USART0 ***********************
                 ; UDR0 - USART I/O Data Register
                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR0A - USART Control and Status Register A
                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                 .equ	U2X0	= 1	; Double the USART transmission speed
                 .equ	UPE0	= 2	; Parity Error
                 .equ	DOR0	= 3	; Data overRun
                 .equ	FE0	= 4	; Framing Error
                 .equ	UDRE0	= 5	; USART Data Register Empty
                 .equ	TXC0	= 6	; USART Transmitt Complete
                 .equ	RXC0	= 7	; USART Receive Complete
                 
                 ; UCSR0B - USART Control and Status Register B
                 .equ	TXB80	= 0	; Transmit Data Bit 8
                 .equ	RXB80	= 1	; Receive Data Bit 8
                 .equ	UCSZ02	= 2	; Character Size
                 .equ	TXEN0	= 3	; Transmitter Enable
                 .equ	RXEN0	= 4	; Receiver Enable
                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR0C - USART Control and Status Register C
                 .equ	UCPOL0	= 0	; Clock Polarity
                 .equ	UCSZ00	= 1	; Character Size
                 .equ	UCPHA0	= UCSZ00	; For compatibility
                 .equ	UCSZ01	= 2	; Character Size
                 .equ	UDORD0	= UCSZ01	; For compatibility
                 .equ	USBS0	= 3	; Stop Bit Select
                 .equ	UPM00	= 4	; Parity Mode Bit 0
                 .equ	UPM01	= 5	; Parity Mode Bit 1
                 .equ	UMSEL00	= 6	; USART Mode Select
                 .equ	UMSEL0	= UMSEL00	; For compatibility
                 .equ	UMSEL01	= 7	; USART Mode Select
                 .equ	UMSEL1	= UMSEL01	; For compatibility
                 
                 ; UBRR0H - USART Baud Rate Register High Byte
                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR0L - USART Baud Rate Register Low Byte
                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 ; ***** TWI **************************
                 ; TWAMR - TWI (Slave) Address Mask Register
                 .equ	TWAM0	= 1	; 
                 .equ	TWAMR0	= TWAM0	; For compatibility
                 .equ	TWAM1	= 2	; 
                 .equ	TWAMR1	= TWAM1	; For compatibility
                 .equ	TWAM2	= 3	; 
                 .equ	TWAMR2	= TWAM2	; For compatibility
                 .equ	TWAM3	= 4	; 
                 .equ	TWAMR3	= TWAM3	; For compatibility
                 .equ	TWAM4	= 5	; 
                 .equ	TWAMR4	= TWAM4	; For compatibility
                 .equ	TWAM5	= 6	; 
                 .equ	TWAMR5	= TWAM5	; For compatibility
                 .equ	TWAM6	= 7	; 
                 .equ	TWAMR6	= TWAM6	; For compatibility
                 
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR1 - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 ; TCCR1C - Timer/Counter1 Control Register C
                 .equ	FOC1B	= 6	; 
                 .equ	FOC1A	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	TOIE2A	= TOIE2	; For compatibility
                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                 
                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                 
                 ; TCCR2A - Timer/Counter2 Control Register A
                 .equ	WGM20	= 0	; Waveform Genration Mode
                 .equ	WGM21	= 1	; Waveform Genration Mode
                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                 
                 ; TCCR2B - Timer/Counter2 Control Register B
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM22	= 3	; Waveform Generation Mode
                 .equ	FOC2B	= 6	; Force Output Compare B
                 .equ	FOC2A	= 7	; Force Output Compare A
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2A - Timer/Counter2 Output Compare Register A
                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; OCR2B - Timer/Counter2 Output Compare Register B
                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                 .equ	EXCLK	= 6	; Enable External Clock Input
                 
                 ; GTCCR - General Timer Counter Control register
                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PSR2	= PSRASY	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register A
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCSRB - The ADC Control and Status register B
                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                 .equ	ACME	= 6	; 
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; DIDR0 - Digital Input Disable Register
                 .equ	ADC0D	= 0	; 
                 .equ	ADC1D	= 1	; 
                 .equ	ADC2D	= 2	; 
                 .equ	ADC3D	= 3	; 
                 .equ	ADC4D	= 4	; 
                 .equ	ADC5D	= 5	; 
                 
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 ; DIDR1 - Digital Input Disable Register 1
                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                 
                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                 
                 ; TCCR0A - Timer/Counter  Control Register A
                 .equ	WGM00	= 0	; Waveform Generation Mode
                 .equ	WGM01	= 1	; Waveform Generation Mode
                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                 
                 ; TCCR0B - Timer/Counter Control Register B
                 .equ	CS00	= 0	; Clock Select
                 .equ	CS01	= 1	; Clock Select
                 .equ	CS02	= 2	; Clock Select
                 .equ	WGM02	= 3	; 
                 .equ	FOC0B	= 6	; Force Output Compare B
                 .equ	FOC0A	= 7	; Force Output Compare A
                 
                 ; TCNT0 - Timer/Counter0
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0A - Timer/Counter0 Output Compare Register
                 .equ	OCR0A_0	= 0	; 
                 .equ	OCR0A_1	= 1	; 
                 .equ	OCR0A_2	= 2	; 
                 .equ	OCR0A_3	= 3	; 
                 .equ	OCR0A_4	= 4	; 
                 .equ	OCR0A_5	= 5	; 
                 .equ	OCR0A_6	= 6	; 
                 .equ	OCR0A_7	= 7	; 
                 
                 ; OCR0B - Timer/Counter0 Output Compare Register
                 .equ	OCR0B_0	= 0	; 
                 .equ	OCR0B_1	= 1	; 
                 .equ	OCR0B_2	= 2	; 
                 .equ	OCR0B_3	= 3	; 
                 .equ	OCR0B_4	= 4	; 
                 .equ	OCR0B_5	= 5	; 
                 .equ	OCR0B_6	= 6	; 
                 .equ	OCR0B_7	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	PSR10	= PSRSYNC	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; EICRA - External Interrupt Control Register
                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                 
                 ; EIMSK - External Interrupt Mask Register
                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                 
                 ; EIFR - External Interrupt Flag Register
                 .equ	INTF0	= 0	; External Interrupt Flag 0
                 .equ	INTF1	= 1	; External Interrupt Flag 1
                 
                 ; PCICR - Pin Change Interrupt Control Register
                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                 
                 ; PCMSK2 - Pin Change Mask Register 2
                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                 
                 ; PCMSK1 - Pin Change Mask Register 1
                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                 
                 ; PCMSK0 - Pin Change Mask Register 0
                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                 
                 ; PCIFR - Pin Change Interrupt Flag Register
                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCSR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEARL - EEPROM Address Register Low Byte
                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                 
                 ; EEARH - EEPROM Address Register High Byte
                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 0
                 
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEPE	= 1	; EEPROM Write Enable
                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; CLKPR - Clock Prescale Register
                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                 
                 ; SPMCSR - Store Program Memory Control and Status Register
                 .equ	SELFPRGEN	= 0	; Self Programming Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 .equ	IVCE	= 0	; 
                 .equ	IVSEL	= 1	; 
                 .equ	PUD	= 4	; 
                 .equ	BODSE	= 5	; BOD Sleep Enable
                 .equ	BODS	= 6	; BOD Sleep
                 
                 ; MCUSR - MCU Status Register
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	EXTREF	= EXTRF	; For compatibility
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 
                 ; SMCR - Sleep Mode Control Register
                 .equ	SE	= 0	; Sleep Enable
                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                 
                 ; GPIOR2 - General Purpose I/O Register 2
                 .equ	GPIOR20	= 0	; 
                 .equ	GPIOR21	= 1	; 
                 .equ	GPIOR22	= 2	; 
                 .equ	GPIOR23	= 3	; 
                 .equ	GPIOR24	= 4	; 
                 .equ	GPIOR25	= 5	; 
                 .equ	GPIOR26	= 6	; 
                 .equ	GPIOR27	= 7	; 
                 
                 ; GPIOR1 - General Purpose I/O Register 1
                 .equ	GPIOR10	= 0	; 
                 .equ	GPIOR11	= 1	; 
                 .equ	GPIOR12	= 2	; 
                 .equ	GPIOR13	= 3	; 
                 .equ	GPIOR14	= 4	; 
                 .equ	GPIOR15	= 5	; 
                 .equ	GPIOR16	= 6	; 
                 .equ	GPIOR17	= 7	; 
                 
                 ; GPIOR0 - General Purpose I/O Register 0
                 .equ	GPIOR00	= 0	; 
                 .equ	GPIOR01	= 1	; 
                 .equ	GPIOR02	= 2	; 
                 .equ	GPIOR03	= 3	; 
                 .equ	GPIOR04	= 4	; 
                 .equ	GPIOR05	= 5	; 
                 .equ	GPIOR06	= 6	; 
                 .equ	GPIOR07	= 7	; 
                 
                 ; PRR - Power Reduction Register
                 .equ	PRADC	= 0	; Power Reduction ADC
                 .equ	PRUSART0	= 1	; Power Reduction USART
                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                 .equ	PRTWI	= 7	; Power Reduction TWI
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	CKOUT	= 6	; Clock output
                 .equ	CKDIV8	= 7	; Divide clock by 8
                 
                 ; HIGH fuse bits
                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	WDTON	= 4	; Watchdog Timer Always On
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	DWEN	= 6	; debugWIRE Enable
                 .equ	RSTDISBL	= 7	; External reset disable
                 
                 ; EXTENDED fuse bits
                 .equ	BOOTRST	= 0	; Select reset vector
                 .equ	BOOTSZ0	= 1	; Select boot size
                 .equ	BOOTSZ1	= 2	; Select boot size
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x0fff	; Note: Word address
                 .equ	IOEND	= 0x00ff
                 .equ	SRAM_START	= 0x0100
                 .equ	SRAM_SIZE	= 1024
                 .equ	RAMEND	= 0x04ff
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x01ff
                 .equ	EEPROMEND	= 0x01ff
                 .equ	EEADRBITS	= 9
                 #pragma AVRPART MEMORY PROG_FLASH 8192
                 #pragma AVRPART MEMORY EEPROM 512
                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0xc00
                 .equ	NRWW_STOP_ADDR	= 0xfff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0xbff
                 .equ	PAGESIZE	= 32
                 .equ	FIRSTBOOTSTART	= 0xf80
                 .equ	SECONDBOOTSTART	= 0xf00
                 .equ	THIRDBOOTSTART	= 0xe00
                 .equ	FOURTHBOOTSTART	= 0xc00
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0002	; External Interrupt Request 1
                 .equ	PCI0addr	= 0x0003	; Pin Change Interrupt Request 0
                 .equ	PCI1addr	= 0x0004	; Pin Change Interrupt Request 0
                 .equ	PCI2addr	= 0x0005	; Pin Change Interrupt Request 1
                 .equ	WDTaddr	= 0x0006	; Watchdog Time-out Interrupt
                 .equ	OC2Aaddr	= 0x0007	; Timer/Counter2 Compare Match A
                 .equ	OC2Baddr	= 0x0008	; Timer/Counter2 Compare Match A
                 .equ	OVF2addr	= 0x0009	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x000b	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x000c	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x000d	; Timer/Counter1 Overflow
                 .equ	OC0Aaddr	= 0x000e	; TimerCounter0 Compare Match A
                 .equ	OC0Baddr	= 0x000f	; TimerCounter0 Compare Match B
                 .equ	OVF0addr	= 0x0010	; Timer/Couner0 Overflow
                 .equ	SPIaddr	= 0x0011	; SPI Serial Transfer Complete
                 .equ	URXCaddr	= 0x0012	; USART Rx Complete
                 .equ	UDREaddr	= 0x0013	; USART, Data Register Empty
                 .equ	UTXCaddr	= 0x0014	; USART Tx Complete
                 .equ	ADCCaddr	= 0x0015	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x0016	; EEPROM Ready
                 .equ	ACIaddr	= 0x0017	; Analog Comparator
                 .equ	TWIaddr	= 0x0018	; Two-wire Serial Interface
                 .equ	SPMRaddr	= 0x0019	; Store Program Memory Read
                 
                 .equ	INT_VECTORS_SIZE	= 26	; size in words
                 
                 #endif  /* _M88PDEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                  * companion_cube_controller.asm
                  * 
                  *  Created: 23.03.2013 20:07:38
                  *   Author: Michael Happl
                  *
                  *	Contoller: ATMega88p
                  *
                  *	Description: This program reads an analog voltage, uses the upper 8 bit of it as pwm value. this pwm is used to control leds with
                  *  a TLC59025 16-channel led driver. Next, the program is extended by adding a pulsed brightness of the leds. This is done by writing 
                  *  a new compare value each time the timer1 has an overflow. Switching between the analog controlled brightness is done via a switch
                  *  which is connected to the external interrut 0.
                  */ 
                 
                 //------------------------------------------------------------
                 // Just some space for custom definitions
                 .set	SDI1 = PORTD3	//PD3 is wired to the serial data input pin of the first led driver
                 .set	SDI2 = PORTD4	//PD4 is wired to the serial data input pin of the second led driver
                 .set	SDI3 = PORTD5	//PD5 is wired to the serial data input pin of the third led driver
                 .set	D_CLK = PORTD6	//PD6 is used as clock source for the serial data input of all 3 led drivers
                 .set	LE = PORTD7		//PD7 is wired to the latch enable of all 3 led drivers
                 
                 .def	t0_cnt = r17	//Register17 is used to count the data bits being written to the led drivers
                 .def	up_down = r18	//register18 is used to save in which direction  the data from the table is read
                 .def	read_cnt = r19	//in register19 the number of the value in the table is stored
                 //------------------------------------------------------------
                 
                 .cseg				//program is stored in the flash memory
                 
                 reset:				
                 .org	0			//compiling starts at adress 00
000000 c019      	rjmp	setup	//
                 
                 .org	0x001
000001 c08b      	rjmp	ext_int0		//Interrupt routine for the external interrupt 0
                 
                 .org	0x00B
00000b c0a4      	rjmp	t1_cmpa_int		//interrupt routine for the compare match a interrupt of the timer1
                 
                 .org	0x00D
00000d c08d      	rjmp	t1_of_int		//interrupt routine for the timer1 overflow
                 
                 .org	0x010
000010 c03c      	rjmp	t0_overflow		//Interrupt routine for the timer0 overflow
                 
                 .org	0x015
000015 c02f      	rjmp	adc_int			//jump to the interrupt routine for the ADC
                 
                 .org	0x01A				//Start after the interrupt vectors
                 
                 setup:
00001a e004      	ldi		r16,high(RAMEND)	//initializing the stack pointers
00001b bf0e      	out		SPH,r16				
00001c ef0f      	ldi		r16,low(RAMEND)		 
00001d bf0d      	out		SPL,r16			
                 	
                 	//First, we need to activate all interrupts:
                 	
00001e 9478      	sei						//global interrupt enable
                 
                 	//then we need to configure the ADC module:
                 
00001f e600      	ldi		r16, (1<<REFS0) | (1<<ADLAR)
000020 9300 007c 	sts		ADMUX,r16		//AVCC as reference voltage; result is left orientated; channel0 as input
000022 ee0f      	ldi		r16, (1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0)
000023 9300 007a 	sts		ADCSRA,r16		//ADC is enabled; first conversion started; auto trigger and interrupt is enabled; 128 prescaler => 125kHz ADC clock
000025 e001      	ldi		r16, (1<<ADC0D)
000026 9300 007e 	sts		DIDR0,r16		//disabling the digital input buffer on PC0
                 							//we don't need to modify ADCSRB because it's default set to free running mode for the ADC
                 
                 	//we also need to set the pwm pin OC1A (PB1) as an output
                 
000028 e002      	ldi		r16, (1<<DDB1)	//only PB1 needs to be an output
000029 b904      	out		DDRB,r16
00002a e002      	ldi		r16, (1<<PORTB1)
00002b b905      	out		PORTB,r16		//Starting with outputs disabled (OE = 1)
                 
                 	//the control pins for the LED drivers also need to be configured
                 
00002c ef08      	ldi		r16, (1<<DDD3) | (1<<DDD4) | (1<<DDD5) | (1<<DDD6) | (1<<DDD7)
00002d b90a      	out		DDRD,r16		//All SDI pins, the clock and the latch enable need to be outputs
00002e e404      	ldi		r16, (1<<PORTD2) | (1<<D_CLK)	//PD2 is the interrupt input for the switch and is configured with an internal pull up
00002f b90b      	out		PORTD,r16		//The data inputs start-value doesn't matter, they will be set later; the latch enable must be 0; 
                 
                 	//the timer0 provides the clock source for the data input
                 
000030 e800      	ldi		r16,128			//50% duty cycle
000031 bd07      	out		OCR0A,r16
000032 ec03      	ldi		r16, (1<<COM0A1) | (1<<COM0A0) | (1<<WGM01) | (1<<WGM00)	//output pin (OC0A) is set at compare match and cleared at top
000033 bd04      	out		TCCR0A,r16		//Fast pwm mode with 0xFF as top (results in 62,5kHz clock rate for the data input)
000034 e001      	ldi		r16, (1<<CS00)	
000035 bd05      	out		TCCR0B,r16		//clock prescaler is set to 1
000036 e001      	ldi		r16, (1<<TOIE0)	//timer0 overflow interrupt is enabed
000037 9300 006e 	sts		TIMSK0,r16
000039 2711      	clr		t0_cnt			//The counter register is cleared at the start to ensure correct counting
                 
                 	//External interrupt 0 is configured:
                 
00003a e002      	ldi		r16, (1<<ISC01)
00003b 9300 0069 	sts		EICRA,r16		//Interrupt activates on falling edge on pin PD2
00003d e001      	ldi		r16, (1<<INT0)
00003e bb0d      	out		EIMSK,r16		//Interrrupt is activated
                 
                 	//writing the adress of the data table to the X register and set the up/down register to upward reading of the values
                 
00003f eda8      	ldi		XL,LOW(data_table)
000040 e0b0      	ldi		XH,HIGH(data_table)
000041 2722      	clr		up_down			//if the up/down register is cleared, the data is read from bottom to top => starting with upward reading
000042 2733      	clr		read_cnt		//therefore the read cycle counter must start at zero
                 
                 loop:				//At this moment the main program is just a loop of doing nothing
000043 0000      	nop
000044 cffe      	rjmp	loop
                 
                 	//the ADC interrupt routine
                 
                 adc_int:			
000045 b6ff      	in		r15,SREG		//saving the status register
000046 92ff      	push	r15				//and pushing it on the stack so it will be save if another interrupt happens while this one is running
000047 930f      	push	r16				//and also pushing r16, in case the interrupt happend while some other value was in there
000048 9100 0079 	lds		r16,ADCH		//reading the upper 8 bits of the conversion result
00004a 9300 0088 	sts		OCR1AL,r16		//and set them as compare value for the pwm
00004c c00e      	rjmp	ret_int
                 	
                 	//In the overflow interrupt routine the data for the shift register inputs (SDI1 to SDI3) is written to the pins
                 
                 t0_overflow:		
00004d b6ff      	in		r15,SREG		//saving the status register
00004e 92ff      	push	r15				//and pushing it on the stack so it will be save if another interrupt happens while this one is running
00004f 930f      	push	r16				//and also pushing r16, in case the interrupt happend while some other value was in there
000050 9513      	inc		t0_cnt			//counting the activations of this routine
000051 e308      	ldi		r16, (1<<SDI3) | (1<<SDI2) | (1<<SDI1)
000052 b90b      	out		PORTD,r16		//This section can be modified later, but at this moment all leds will be turned on at the same time
000053 e101      	ldi		r16,17
000054 1310      	cpse	t0_cnt,r16		//after 17 activations the start value of SDI1 - SDI3 isn't stored in the led drivers anymore => skip next instuction
000055 c005      	rjmp	ret_int			//othervise we just return and wait for the next activation
000056 9a5f      	sbi		PORTD,LE		//now the data latches are activated		
000057 2700      	clr		r16				//then the timer0 is turned off
000058 bd05      	out		TCCR0B,r16		
000059 985f      	cbi		PORTD,LE		//the pulse doesn't need to be very long, so LE is turned off again	
                 
                 	//Next we're going to set the timer1 module to fast pwm mode:
                 	
00005a d004      	rcall	t1_conf_adc
                 
                 ret_int:					//because the status register and the r16 have to be restored we need one interrupt return routine
00005b 910f      	pop		r16				//restoring r16
00005c 90ff      	pop		r15
00005d beff      	out		SREG,r15		//and the status register
00005e 9518      	reti					//now everything is done
                 
                 	//timer0 is set to fast pwm mode with 255 as top for the adc controlled operation
                 
                 t1_conf_adc:
00005f ee0f      	ldi		r16, (1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0)
000060 9300 007a 	sts		ADCSRA,r16		//ADC is enabled; and settings are restored
000062 2700      	clr		r16				//the high byte is set to 0, just to be sure
000063 9300 0089 	sts		OCR1AH,r16
000065 e800      	ldi		r16,128			//Initial 50% duty cycle
000066 9300 0088 	sts		OCR1AL,r16
000068 ec02      	ldi		r16, (1<<COM1A1) | (1<<COM1A0 ) | (1<<WGM11)
000069 9300 0080 	sts		TCCR1A,r16		//inverting mode, WGM11 = 1 and WGM10 = 0 (fast pwm mode with ICR1 as TOP value)
00006b e109      	ldi		r16, (1<<WGM13) | (1<<WGM12) | (1<<CS10)
00006c 9300 0081 	sts		TCCR1B,r16		//no input, so INCNC1 and ICES1 are 0, WGM13 and 12 are both one for fast pwm and clock prescaler = 1
00006e 2700      	clr		r16
00006f 9300 0087 	sts		ICR1H,r16		//the high byte is set to 0, just to be sure
000071 ef0f      	ser		r16				
000072 9300 0086 	sts		ICR1L,r16		//set top value for pwm to 255
000074 9508      	ret
                 
                 	//timer0 is set to fast pwm mode 255 as top for the adc controlled operation
                 
                 t1_conf_pulse:
000075 2700      	clr		r16
000076 9300 007a 	sts		ADCSRA,r16		//ADC is disabled
000078 2700      	clr		r16				//because the table is read bottom up, we must start with a zero as compare value
000079 9300 0089 	sts		OCR1AH,r16
00007b 9300 0088 	sts		OCR1AL,r16
00007d ec02      	ldi		r16, (1<<COM1A1) | (1<<COM1A0 ) | (1<<WGM11)
00007e 9300 0080 	sts		TCCR1A,r16		//inverting mode, WGM11 = 1 and WGM10 = 0 (fast pwm mode with ICR1 as TOP value)
000080 e109      	ldi		r16, (1<<WGM13) | (1<<WGM12) | (1<<CS10)
000081 9300 0081 	sts		TCCR1B,r16		//no input, so INCNC1 and ICES1 are 0, WGM13 and 12 are both one for fast pwm and clock prescaler = 1
000083 e30f      	ldi		r16,0x3F	
000084 9300 0087 	sts		ICR1H,r16		//set top value for pwm to 0x3FFF (16383)
000086 ef0f      	ser		r16	
000087 9300 0086 	sts		ICR1L,r16
000089 e002      	ldi		r16, (1<<OCIE1A)
00008a 9300 006f 	sts		TIMSK1,r16		//and starting with the compare interrupt enabled
00008c 9508      	ret
                 
                 	//if the button is pressed the program needs to switch from analog control to pulsing brightness
                 
                 ext_int0:	
00008d b6ff      	in		r15,SREG		//saving the status register
00008e 92ff      	push	r15				//and pushing it on the stack so it will be save if another interrupt happens while this one is running
00008f 930f      	push	r16				//and also pushing r16, in case the interrupt happend while some other value was in there
000090 9100 006f 	lds		r16,TIMSK1		//looking if overflow or compare interrupt is set
000092 ff01      	sbrs	r16,OCIE1A		//if the output compare interrupt is set, we need to switch to analog control
000093 c001      	rjmp	of_check		//if not, we need to check the overflow interrupt too
000094 c004      	rjmp	analog_ctrl
                 
                 of_check:
000095 fd00      	sbrc	r16,TOIE1		//if the overflow interrupt is enabled
000096 c002      	rjmp	analog_ctrl		//we switch to analog control
000097 dfdd      	rcall	t1_conf_pulse	//if both interrupts are disabled the timer can be set to pulsing control
000098 cfc2      	rjmp	ret_int			//then we just return
                 
                 analog_ctrl:
000099 dfc5      	rcall	t1_conf_adc		//for analog controll we just call the right configuration subroutine
00009a cfc0      	rjmp	ret_int			//return routine is the same as for all other interrupts because the status register and r16 need to be restored
                 
                 	//here the new compare value is written into the OCRA1-registers and if its too low, the compare interrupt is enabled
                 
                 t1_of_int:		
00009b b6ff      	in		r15,SREG		//saving the status register
00009c 92ff      	push	r15				//and pushing it on the stack so it will be save if another interrupt happens while this one is running
00009d 930f      	push	r16				//and also pushing r16, in case the interrupt happend while some other value was in there
00009e fd20      	sbrc	up_down,0		//check if top-down or bottom up reading the values
00009f c004      	rjmp	t1_of_down		//if the bit is set => reading downwards
0000a0 3830      	cpi		read_cnt,128	//reached top?
0000a1 f031      	breq	up_to_down		//if yes => reverse the reading direction
0000a2 d021      	rcall	read_up			//else the program continues reading the values upward
0000a3 cfb7      	rjmp	ret_int			//return routine is the same as for all other interrupts because the status register and r16 need to be restored
                 
                 t1_of_down:
0000a4 3430      	cpi		read_cnt,64		//when counting downwards in the overflow interrupt mode check if reached the middle 
0000a5 f029      	breq	of_to_cmp		//if yes => changing to compare interrupt mode
0000a6 d027      	rcall	read_down		//else => just read downwards another time
0000a7 cfb3      	rjmp	ret_int
                 
                 up_to_down:			//switching the counting direction
0000a8 6020      	sbr		up_down,0		//first the direction bit is set to downward reading
0000a9 d024      	rcall	read_down		//and then the downward reading subroutine is called
0000aa cfb0      	rjmp	ret_int			//thats already everything
                 
                 of_to_cmp:			//deactivating the overflow interrupt and activating the compare interrupt
0000ab e002      	ldi		r16, (1<<OCIE1A)
0000ac 9300 006f 	sts		TIMSK1,r16		//disabling the overflow and enabling the compare interrupt
0000ae d01f      	rcall	read_down		//and continue reading downwards
0000af cfab      	rjmp	ret_int
                 
                 	//here the new compare value is written into the OCRA1-registers and if its too high, the overflow interrupt is enabled
                 
                 t1_cmpa_int:		//here the new compare value is written into the OCRA1-registers and if its too high, the overflow interrupt is enabled
0000b0 b6ff      	in		r15,SREG		//saving the status register
0000b1 92ff      	push	r15				//and pushing it on the stack so it will be save if another interrupt happens while this one is running
0000b2 930f      	push	r16				//and also pushing r16, in case the interrupt happend while some other value was in there
0000b3 fd20      	sbrc	up_down,0		//check if top-down or bottom up reading the values
0000b4 c004      	rjmp	t1_cmp_down		//if the bit is set => counting down
0000b5 3430      	cpi		read_cnt,64		//else => reading upwards; reached the middle of the table?
0000b6 f049      	breq	cmp_to_of		//if yes => program switches from compare to overflow interrup
0000b7 d00c      	rcall	read_up			//else => continue reading upwards
0000b8 cfa2      	rjmp	ret_int			//return routine is the same as for all other interrupts because the status register and r16 need to be restored
                 
                 t1_cmp_down:
0000b9 3030      	cpi		read_cnt,0		//already reached the bottom of the table?
0000ba f011      	breq	down_to_up		//if yes => reverse reading direction
0000bb d012      	rcall	read_down		//othervise just continue reading downwards
0000bc cf9e      	rjmp	ret_int
                 
                 down_to_up:
0000bd 7f2f      	cbr		up_down,0		//clear the direction bit in the up/down register => upwards reading
0000be d005      	rcall	read_up			//and now just read upwards
0000bf cf9b      	rjmp	ret_int			//and that's it already
                 
                 cmp_to_of:			//deactivating the compare interrupt and activating the overflow interrupt
0000c0 e001      	ldi		r16, (1<<TOIE1)
0000c1 9300 006f 	sts		TIMSK1,r16		//disabling the compare and enabling the overflow interrupt
0000c3 cf97      	rjmp	ret_int			//no data is loaded into the compare registers, this is done in the next interrupt
                 
                 	//a small subroutine for the upward reading of the values so it doesn't need to be witten twice:
                 
                 read_up:
0000c4 94f8      	cli						//all interrups are disabled, so the 16 bit value can be written without being disturbed
0000c5 910d      	ld		r16,X+			//we're starting by reading the upper byte of the compare value
0000c6 9300 0089 	sts		OCR1AH,r16		//and writing it into the compare register of timer1
0000c8 910d      	ld		r16,X+			//because the pointer has been incremented in the last instruction, it now reads the low byte of the compare value
0000c9 9300 0088 	sts		OCR1AL,r16		//and storing it in the compare register of timer1
0000cb 9533      	inc		read_cnt		//the numer of the value is stored by incrementing the count-register
0000cc 9478      	sei						//at the end all interrupts are enabled again
0000cd 9508      	ret
                 
                 	//for downward reading of the values there is also a small subroutine
                 
                 read_down:
0000ce 94f8      	cli						//all interrups are disabled, so the 16 bit value can be written without being disturbed
0000cf 910e      	ld		r16,-X			//since the last reading cycle the pointer hasn't been modified we need decrement it first
0000d0 9300 0088 	sts		OCR1AL,r16		//then we can read the lower byte of the compare value and store it in the right register
0000d2 910e      	ld		r16,-X			//the pointer now is still pointing at the lower byte, so wee again need to pre decrement it
0000d3 9300 0089 	sts		OCR1AH,r16		//so we can read the value and store it in the compare register of timer1
0000d5 953a      	dec		read_cnt		//the number of the value is updated by decrementing the count register
0000d6 9478      	sei						//at the end all interrupts are enabled again
0000d7 9508      	ret
                 
                 	//the following table contains the compare values for the pwm:
                 
                 data_table:			//the backslash means that the table continues in the next line
0000d8 0000
0000d9 0000
0000da 0000
0000db 0000
0000dc 0000
0000dd 0000
0000de 0000
0000df 0000
0000e0 0000
0000e1 0001
0000e2 0001
0000e3 0002
0000e4 0003
0000e5 0005
0000e6 0007
0000e7 0009      .dw 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001, 0x0002, 0x0003, 0x0005, 0x0007, 0x0009, \
0000e8 000c
0000e9 0010
0000ea 0015
0000eb 001a
0000ec 0021
0000ed 0029
0000ee 0032
0000ef 003d
0000f0 0049
0000f1 0057
0000f2 0067
0000f3 0079
0000f4 008d
0000f5 00a3
0000f6 00bc
0000f7 00d8
0000f8 00f7      0x000C, 0x0010, 0x0015, 0x001A, 0x0021, 0x0029, 0x0032, 0x003D, 0x0049, 0x0057, 0x0067, 0x0079, 0x008D, 0x00A3, 0x00BC, 0x00D8, 0x00F7, \
0000f9 0118
0000fa 013e
0000fb 0166
0000fc 0192
0000fd 01c2
0000fe 01f6
0000ff 022d
000100 026a
000101 02aa
000102 02ef
000103 0339
000104 0388
000105 03dc
000106 0435
000107 0494
000108 04f7
000109 0561      0x0118, 0x013E, 0x0166, 0x0192, 0x01C2, 0x01F6, 0x022D, 0x026A, 0x02AA, 0x02EF, 0x0339, 0x0388, 0x03DC, 0x0435, 0x0494, 0x04F7, 0x0561, \
00010a 05d0
00010b 0644
00010c 06bf
00010d 073f
00010e 07c6
00010f 0852
000110 08e4
000111 097d
000112 0a1b
000113 0abf
000114 0b6a
000115 0c1a
000116 0cd1
000117 0d8d
000118 0e4f
000119 0f17
00011a 0fe4      0x05D0, 0x0644, 0x06BF, 0x073F, 0x07C6, 0x0852, 0x08E4, 0x097D, 0x0A1B, 0x0ABF, 0x0B6A, 0x0C1A, 0x0CD1, 0x0D8D, 0x0E4F, 0x0F17, 0x0FE4, \
00011b 10b7
00011c 118f
00011d 126c
00011e 134f
00011f 1436
000120 1522
000121 1612
000122 1707
000123 1800
000124 18fc
000125 19fc
000126 1aff
000127 1c06
000128 1d0e
000129 1e19
00012a 1f27
00012b 2035      0x10B7, 0x118F, 0x126C, 0x134F, 0x1436, 0x1522, 0x1612, 0x1707, 0x1800, 0x18FC, 0x19FC, 0x1AFF, 0x1C06, 0x1D0E, 0x1E19, 0x1F27, 0x2035, \
00012c 2146
00012d 2257
00012e 2369
00012f 247b
000130 258d
000131 269f
000132 27af
000133 28bf
000134 29cd
000135 2ad9
000136 2be3
000137 2cea
000138 2dee
000139 2eee
00013a 2feb
00013b 30e3
00013c 31d6      0x2146, 0x2257, 0x2369, 0x247B, 0x258D, 0x269F, 0x27AF, 0x28BF, 0x29CD, 0x2AD9, 0x2BE3, 0x2CEA, 0x2DEE, 0x2EEE, 0x2FEB, 0x30E3, 0x31D6, \
00013d 32c4
00013e 33ad
00013f 3490
000140 356d
000141 3643
000142 3713
000143 37db
000144 389c
000145 3955
000146 3a05
000147 3aae
000148 3b4d
000149 3be4
00014a 3c71
00014b 3cf5
00014c 3d6f
00014d 3ddf      0x32C4, 0x33AD, 0x3490, 0x356D, 0x3643, 0x3713, 0x37DB, 0x389C, 0x3955, 0x3A05, 0x3AAE, 0x3B4D, 0x3BE4, 0x3C71, 0x3CF5, 0x3D6F, 0x3DDF, \
00014e 3e45
00014f 3ea1
000150 3ef2
000151 3f39
000152 3f75
000153 3fa6
000154 3fcd
000155 3fe8
000156 3ff9
000157 3fff      0x3E45, 0x3EA1, 0x3EF2, 0x3F39, 0x3F75, 0x3FA6, 0x3FCD, 0x3FE8, 0x3FF9, 0x3FFF


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega88P" register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:  12 
r16:  88 r17:   3 r18:   5 r19:   7 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   0 r25:   0 r26:   1 r27:   1 r28:   0 r29:   0 r30:   0 r31:   0 
x  :   4 y  :   0 z  :   0 
Registers used: 8 out of 35 (22.9%)

"ATmega88P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   4 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   0 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 cbi   :   1 cbr   :   1 clc   :   0 
clh   :   0 cli   :   2 cln   :   0 clr   :   8 cls   :   0 clt   :   0 
clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 cpi   :   4 
cpse  :   1 dec   :   1 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 
icall :   0 ijmp  :   0 in    :   5 inc   :   2 ld    :   4 ldd   :   0 
ldi   :  29 lds   :   2 lpm   :   0 lsl   :   0 lsr   :   0 mov   :   0 
movw  :   0 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   1 
or    :   0 ori   :   0 out   :  13 pop   :   2 push  :  10 rcall :  10 
ret   :   4 reti  :   1 rjmp  :  24 rol   :   0 ror   :   0 sbc   :   0 
sbci  :   0 sbi   :   1 sbic  :   0 sbis  :   0 sbiw  :   0 sbr   :   1 
sbrc  :   3 sbrs  :   1 sec   :   0 seh   :   0 sei   :   3 sen   :   0 
ser   :   2 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :   0 std   :   0 sts   :  27 sub   :   0 subi  :   0 
swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 28 out of 111 (25.2%)

"ATmega88P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002b0    392    256    648    8192   7.9%
[.dseg] 0x000100 0x000100      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
